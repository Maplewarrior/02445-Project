armdataPreprocessed <- df_all
View(armdataPreprocessed)
new_nan_indexes <- which(is.na(armdataPreprocessed$data_all_exps), arr.ind = T, useNames=F)
length(is.na(armdataPreprocessed$data_all_exps)[is.na(armdataPreprocessed$data_all_exps) == T])
write.csv(df_all, "C:\Users\micha\OneDrive\Skrivebord\02445-Project\Data", row.names = F)
write.csv(df_all, "C:\\Users\\micha\\OneDrive\\Skrivebord\\02445-Project\\Data\\armdataPreprocessed.csv", row.names = F)
10*10*300
# Save a .csv file containing all labels
vec_distances <- c(rep("15", 90000), rep("22.5",90000),rep("30",90000),rep("37.5",90000), rep("45",90000))
obstacle <- c(rep("S", 30000), rep("M", 30000), rep("L", 30000))
# Save a .csv file containing all labels
vec_distances <- c(rep("15", 90000), rep("22.5",90000),rep("30",90000),rep("37.5",90000), rep("45",90000))
obstacle <- c(rep("S", 30000), rep("M", 30000), rep("L", 30000))
vec_obstacle <-c(rep(obstacle, 5))
# Save a .csv file containing all labels
vec_distances <- c(rep("15", 90000), rep("22.5",90000),rep("30",90000),rep("37.5",90000), rep("45",90000), rep(NA, 30000))
obstacle <- c(rep("S", 30000), rep("M", 30000), rep("L", 30000))
vec_obstacle <-c(rep(obstacle, 5), rep(NA, 30000))
vec_obstacle[44999:450001]
vec_obstacle[449999:450001]
# Save a .csv file containing all labels
vec_distances <- c(rep("15", 90000), rep("22.5",90000),rep("30",90000),rep("37.5",90000), rep("45",90000), rep(NA, 30000))
vec_distances[449999:450001]
# Save a .csv file containing all labels
distances <- c(rep("15", 90000), rep("22.5",90000),rep("30",90000),rep("37.5",90000), rep("45",90000), rep(NA, 30000))
distances[449999:450001]
obstacle <- c(rep("S", 30000), rep("M", 30000), rep("L", 30000))
obstacles <-c(rep(obstacle, 5), rep(NA, 30000))
df_all_labels <- data.frame(data_all_exps, vec_experiments, vec_coords, vec_people, distances, obstacles)
View(df_all_labels)
load("armdata.RData")
# e experiments: 1:16
# p people: 1:10
# r repetitions: 1:10
# i measurements: 1:300
data_all_exps <- c(NA, 16*10*10*300)
count = 1
for (e in 1:16){
for (p in 1:10){
for (r in 1:10){
for (i in 1:300){
data_all_exps[count] <- armdata[[e]][[p]][[r]][[i]]
count = count+1
}
}
}
}
vec_experiments <- c(rep("e1", 30000), rep("e2", 30000),rep("e3", 30000),rep("e4", 30000),rep("e5", 30000),rep("e6", 30000),
rep("e7", 30000),rep("e8", 30000),rep("e9", 30000),rep("e10", 30000),rep("e11", 30000),rep("e12", 30000),
rep("e13", 30000),rep("e14", 30000),rep("e15", 30000),rep("e16", 30000))
people <- c(rep("p1", 3000), rep("p2", 3000),rep("p3", 3000),rep("p4", 3000),rep("p5", 3000),rep("p6", 3000),
rep("p7", 3000),rep("p8", 3000),rep("p9", 3000),rep("p10", 3000))
vec_people <- c(rep(people, 16))
x_coords <- c(rep("x",100))
y_coords <- c(rep("y",100))
z_coords <- c(rep("z",100))
vec_coords <- c(rep(c(x_coords,y_coords,z_coords),1600))
df_all <- data.frame(data_all_exps, vec_experiments, vec_coords, vec_people)
# Test
# df_all$data_all_exps[384206]
# df_all$data_all_exps[384205]
# df_all$data_all_exps[384204]
# df_all$data_all_exps[384203]
# df_all$data_all_exps[384202]
# df_all$data_all_exps[384201]
# Remove NaN's from df_all
num_nans <- length(is.na(df_all$data_all_exps)[is.na(df_all$data_all_exps) == T])
nan_indexes <- which(is.na(df_all$data_all_exps), arr.ind = T, useNames=F)
# test_index = nan_indexes[1]
# test_index
# test = T
# if (df_all$vec_coords[test_index] == df_all$vec_coords[test_index+1]){
#   if (test == T){print("success")
#   }
# }
# is.na(df_all$data_all_exps[test_index])
for (i in 1:num_nans){
below = FALSE
below_2 = FALSE
above = FALSE
index = nan_indexes[i]
below_value = df_all$data_all_exps[index+1]
below_2_value = df_all$data_all_exps[index+2]
above_value = df_all$data_all_exps[index-1]
# Check if the below value of a NaN is also a NaN
if (df_all$vec_coords[index] == df_all$vec_coords[index+1]){
if (is.na(below_value) == FALSE){
below = TRUE
}}
if (df_all$vec_coords[index] == df_all$vec_coords[index+2]){
if (is.na(below_value_2) ==FALSE) {
below_2 = TRUE}}
# Check if the above value of a NaN is not a NaN
if (df_all$vec_coords[index] == df_all$vec_coords[index-1]){
if (is.na(above_value) == FALSE){
above = TRUE
}}
if (above == T && below ==T){
df_all$data_all_exps[index] = (below_value + above_value)/2
}
if (above == T && below == F){
df_all$data_all_exps[index] = above_value
}
if (below == T && above == F){
df_all$data_all_exps[index] = below_value
}
if (below == F && below_2 == T){
df_all$data_all_exps[index] = below_2_value
}
}
# Check the number of remanining NaN values
#length(is.na(df_all$data_all_exps)[is.na(df_all$data_all_exps) == T])
# Get the indices of the remaining NaN values
new_nan_indexes <- which(is.na(df_all$data_all_exps), arr.ind = T, useNames=F)
# Replace the remaining NaN values with the previous valid value.
for (i in length(new_nan_indexes):1){
index <- new_nan_indexes[i]
print(index)
df_all$data_all_exps[index] <- df_all$data_all_exps[index+1]
}
# Test if the replacing was done correctly (index 384204 and below were all originally NaN's)
# df_all$data_all_exps[384206]
# df_all$data_all_exps[384205]
# df_all$data_all_exps[384204]
# df_all$data_all_exps[384203]
# df_all$data_all_exps[384202]
# df_all$data_all_exps[384201]
df_all$data_all_exps[384205]
df_all$data_all_exps[384204]
df_all$data_all_exps[384203]
df_all$data_all_exps[384202]
df_all$data_all_exps[384201]
write.csv(df_all, "C:\\Users\\micha\\OneDrive\\Skrivebord\\02445-Project\\Data\\armdataPreprocessed.csv", row.names = F)
# Save a .csv file containing all labels
distances <- c(rep("15", 90000), rep("22.5",90000),rep("30",90000),rep("37.5",90000), rep("45",90000), rep(NA, 30000))
distances[449999:450001]
obstacle <- c(rep("S", 30000), rep("M", 30000), rep("L", 30000))
obstacles <-c(rep(obstacle, 5), rep(NA, 30000))
df_all_labels <- data.frame(data_all_exps, vec_experiments, vec_coords, vec_people, distances, obstacles)
write.csv(df_all, "C:\\Users\\micha\\OneDrive\\Skrivebord\\02445-Project\\Data\\armdataPreprocessedAllLabels.csv", row.names = F)
load("armdata.RData")
load("armdata.RData")
# e experiments: 1:16
# p people: 1:10
# r repetitions: 1:10
# i measurements: 1:300
data_all_exps <- c(NA, 16*10*10*300)
count = 1
for (e in 1:16){
for (p in 1:10){
for (r in 1:10){
for (i in 1:300){
data_all_exps[count] <- armdata[[e]][[p]][[r]][[i]]
count = count+1
}
}
}
}
vec_experiments <- c(rep("e1", 30000), rep("e2", 30000),rep("e3", 30000),rep("e4", 30000),rep("e5", 30000),rep("e6", 30000),
rep("e7", 30000),rep("e8", 30000),rep("e9", 30000),rep("e10", 30000),rep("e11", 30000),rep("e12", 30000),
rep("e13", 30000),rep("e14", 30000),rep("e15", 30000),rep("e16", 30000))
people <- c(rep("p1", 3000), rep("p2", 3000),rep("p3", 3000),rep("p4", 3000),rep("p5", 3000),rep("p6", 3000),
rep("p7", 3000),rep("p8", 3000),rep("p9", 3000),rep("p10", 3000))
vec_people <- c(rep(people, 16))
x_coords <- c(rep("x",100))
y_coords <- c(rep("y",100))
z_coords <- c(rep("z",100))
vec_coords <- c(rep(c(x_coords,y_coords,z_coords),1600))
df_all <- data.frame(data_all_exps, vec_experiments, vec_coords, vec_people)
# Test
# df_all$data_all_exps[384206]
# df_all$data_all_exps[384205]
# df_all$data_all_exps[384204]
# df_all$data_all_exps[384203]
# df_all$data_all_exps[384202]
# df_all$data_all_exps[384201]
# Remove NaN's from df_all
num_nans <- length(is.na(df_all$data_all_exps)[is.na(df_all$data_all_exps) == T])
nan_indexes <- which(is.na(df_all$data_all_exps), arr.ind = T, useNames=F)
# test_index = nan_indexes[1]
# test_index
# test = T
# if (df_all$vec_coords[test_index] == df_all$vec_coords[test_index+1]){
#   if (test == T){print("success")
#   }
# }
# is.na(df_all$data_all_exps[test_index])
for (i in 1:num_nans){
below = FALSE
below_2 = FALSE
above = FALSE
index = nan_indexes[i]
below_value = df_all$data_all_exps[index+1]
below_2_value = df_all$data_all_exps[index+2]
above_value = df_all$data_all_exps[index-1]
# Check if the below value of a NaN is also a NaN
if (df_all$vec_coords[index] == df_all$vec_coords[index+1]){
if (is.na(below_value) == FALSE){
below = TRUE
}}
if (df_all$vec_coords[index] == df_all$vec_coords[index+2]){
if (is.na(below_value_2) ==FALSE) {
below_2 = TRUE}}
# Check if the above value of a NaN is not a NaN
if (df_all$vec_coords[index] == df_all$vec_coords[index-1]){
if (is.na(above_value) == FALSE){
above = TRUE
}}
if (above == T && below ==T){
df_all$data_all_exps[index] = (below_value + above_value)/2
}
if (above == T && below == F){
df_all$data_all_exps[index] = above_value
}
if (below == T && above == F){
df_all$data_all_exps[index] = below_value
}
if (below == F && below_2 == T){
df_all$data_all_exps[index] = below_2_value
}
}
new_nan_indexes <- which(is.na(df_all$data_all_exps), arr.ind = T, useNames=F)
# Replace the remaining NaN values with the previous valid value.
for (i in length(new_nan_indexes):1){
index <- new_nan_indexes[i]
print(index)
df_all$data_all_exps[index] <- df_all$data_all_exps[index+1]
}
# Test if the replacing was done correctly (index 384204 and below were all originally NaN's)
# df_all$data_all_exps[384206]
# df_all$data_all_exps[384205]
# df_all$data_all_exps[384204]
# df_all$data_all_exps[384203]
# df_all$data_all_exps[384202]
# df_all$data_all_exps[384201]
# Save dataframe as a .csv file
write.csv(df_all, "C:\\Users\\micha\\OneDrive\\Skrivebord\\02445-Project\\Data\\armdataPreprocessed.csv", row.names = F)
# Save a .csv file containing all labels
distances <- c(rep("15", 90000), rep("22.5",90000),rep("30",90000),rep("37.5",90000), rep("45",90000), rep(NA, 30000))
distances[449999:450001]
obstacle <- c(rep("S", 30000), rep("M", 30000), rep("L", 30000))
obstacles <-c(rep(obstacle, 5), rep(NA, 30000))
df_all_labels <- data.frame(data_all_exps, vec_experiments, vec_coords, vec_people, distances, obstacles)
write.csv(df_all, "C:\\Users\\micha\\OneDrive\\Skrivebord\\02445-Project\\Data\\armdataPreprocessedAllLabels.csv", row.names = F)
3000*10
3*16
3*12
View(df_all_labels)
df_all[365999:366002]
df_all$data_all_exps[365999:366002]
df_all$vec_coords[365999:366002]
df_all_labels$data_all_exps[336199:336201]
df_all_labels$data_all_exps[336200:336201]
# R2
df_all_labels$data_all_exps[336500:336501]
# R1
df_all_labels$data_all_exps[336200:336201]
# R2
df_all_labels$data_all_exps[336500:336501]
# R1
df_all_labels$data_all_exps[336200:336201]
# R2
df_all_labels$data_all_exps[336500:336501]
# R3
df_all_labels$data_all_exps[336500:336801]
# R1
df_all_labels$data_all_exps[336200:336201]
# R2
df_all_labels$data_all_exps[336500:336501]
# R3
df_all_labels$data_all_exps[336801:336801]
# R4
df_all_labels$data_all_exps[337100:337101]
# R5
df_all_labels$data_all_exps[337401]
# R6
df_all_labels$data_all_exps[337701]
# R7
df_all_labels$data_all_exps[338001]
# R8
df_all_labels$data_all_exps[338301]
# R8
df_all_labels$data_all_exps[338301]
# R9
df_all_labels$data_all_exps[338601]
# R10
df_all_labels$data_all_exps[338901]
View(armdata)
View(df_all)
# Remove NaN's from df_all
num_nans <- length(is.na(df_all$data_all_exps)[is.na(df_all$data_all_exps) == T])
nan_indexes <- which(is.na(df_all$data_all_exps), arr.ind = T, useNames=F)
nan_ondexes
nan_indexes
load("armdata.RData")
data_all_exps <- c(NA, 16*10*10*300)
count = 1
for (e in 1:16){
for (p in 1:10){
for (r in 1:10){
for (i in 1:300){
data_all_exps[count] <- armdata[[e]][[p]][[r]][[i]]
count = count+1
}
}
}
}
vec_experiments <- c(rep("e1", 30000), rep("e2", 30000),rep("e3", 30000),rep("e4", 30000),rep("e5", 30000),rep("e6", 30000),
rep("e7", 30000),rep("e8", 30000),rep("e9", 30000),rep("e10", 30000),rep("e11", 30000),rep("e12", 30000),
rep("e13", 30000),rep("e14", 30000),rep("e15", 30000),rep("e16", 30000))
people <- c(rep("p1", 3000), rep("p2", 3000),rep("p3", 3000),rep("p4", 3000),rep("p5", 3000),rep("p6", 3000),
rep("p7", 3000),rep("p8", 3000),rep("p9", 3000),rep("p10", 3000))
vec_people <- c(rep(people, 16))
x_coords <- c(rep("x",100))
y_coords <- c(rep("y",100))
z_coords <- c(rep("z",100))
vec_coords <- c(rep(c(x_coords,y_coords,z_coords),1600))
df_all <- data.frame(data_all_exps, vec_experiments, vec_coords, vec_people)
# Remove NaN's from df_all
num_nans <- length(is.na(df_all$data_all_exps)[is.na(df_all$data_all_exps) == T])
nan_indexes <- which(is.na(df_all$data_all_exps), arr.ind = T, useNames=F)
nan_indexes
300*10*7
# test_index = nan_indexes[1]
# test_index
# 7
# test = T
# if (df_all$vec_coords[test_index] == df_all$vec_coords[test_index+1]){
#   if (test == T){print("success")
#   }
# }
# is.na(df_all$data_all_exps[test_index])
for (i in 1:num_nans) {
index = nan_indexes[i]
print(df_all$vec_coords[index])
print(df_all$vec_people[index])
}
# test_index = nan_indexes[1]
# test_index
# 7
# test = T
# if (df_all$vec_coords[test_index] == df_all$vec_coords[test_index+1]){
#   if (test == T){print("success")
#   }
# }
# is.na(df_all$data_all_exps[test_index])
nan_indexes
300*10*10
load("armdata.RData")
# 16 experiments, 10 people in each experiment that repeat the motion 10 times.
length(armdata)
# Acesss experiments
length(armdata[[1]])
# Access people
length(armdata[[1]][[1]])
# Access repetition
length(armdata[[1]][[1]][[1]])
# Access datapoint within repetition
armdata[[1]][[1]][[1]][201:300]
X <- rnorm(5,0,1)
Y <- rnorm(5,2,1)
Lin_m <- lm(Y~X)
anova(Lin_m)$Pr[1]
# for (e in 1:length(armdata)){
#   for (p in 1:length(armdata[[1]])){
#    for (r in 1:length(armdata[[1]][[1]])){
#      for i in 1:length(armdata[[1]][[1]][[1]]){
#
#       }
#     }
#   }
# }
# armdata[[1]][[1]][[2]]
mean(armdata[[1]][[1]][[2]][1:100])
# armdata[[1]][[1]][[2]][101:200]
# armdata[[1]][[1]][[2]][201:300]
### 1) Assess if there is a significant effect of person of the observed trajectories.
# ANOVA on means where x, y and z are separated.
People <- list("p1","p2","p3","p4","p5","p6","p7","p8","p9","p10")
Reps <- c("r1","r2","r3","r4","r5","r6","r7","r8","r9","r10")
e1_means_x <- matrix(,nrow = 10, ncol = 10, byrow = T, dimnames = list(Reps, People))
e1_means_y <- matrix(,nrow = 10, ncol = 10, byrow = T, dimnames = list(Reps, People))
e1_means_z <- matrix(,nrow = 10, ncol = 10, byrow = T, dimnames = list(Reps, People))
e2_means_x <- matrix(,nrow = 10, ncol = 10, byrow = T, dimnames = list(Reps, People))
e2_means_y <- matrix(,nrow = 10, ncol = 10, byrow = T, dimnames = list(Reps, People))
e2_means_z <- matrix(,nrow = 10, ncol = 10, byrow = T, dimnames = list(Reps, People))
e3_means_x <- matrix(,nrow = 10, ncol = 10, byrow = T, dimnames = list(Reps, People))
e3_means_y <- matrix(,nrow = 10, ncol = 10, byrow = T, dimnames = list(Reps, People))
e3_means_z <- matrix(,nrow = 10, ncol = 10, byrow = T, dimnames = list(Reps, People))
for (i in 1:10){
for (j in 1:10){
e1_means_x[j,i] <- mean(armdata[[1]][[i]][[j]][1:100])
e1_means_y[j,i] <- mean(armdata[[1]][[i]][[j]][101:200])
e1_means_z[j,i] <- mean(armdata[[1]][[i]][[j]][201:300])
e2_means_x[j,i] <- mean(armdata[[2]][[i]][[j]][1:100])
e2_means_y[j,i] <- mean(armdata[[2]][[i]][[j]][101:200])
e2_means_z[j,i] <- mean(armdata[[2]][[i]][[j]][201:300])
e3_means_x[j,i] <- mean(armdata[[3]][[i]][[j]][1:100])
e3_means_y[j,i] <- mean(armdata[[3]][[i]][[j]][101:200])
e3_means_z[j,i] <- mean(armdata[[3]][[i]][[j]][201:300])
}
}
vec_e1_grps <- c(rep("e1_p1", 10),rep("e1_p2", 10),rep("e1_p3", 10),rep("e1_p4", 10),
rep("e1_p5", 10),rep("e1_p6", 10),rep("e1_p7", 10),rep("e1_p8", 10),
rep("e1_p9", 10),rep("e1_p10", 10))
vec_e2_grps <- c(rep("e2_p1", 10),rep("e2_p2", 10),rep("e2_p3", 10),rep("e2_p4", 10),
rep("e2_p5", 10),rep("e2_p6", 10),rep("e2_p7", 10),rep("e2_p8", 10),
rep("e2_p9", 10),rep("e2_p10", 10))
vec_e3_grps <- c(rep("e3_p1", 10),rep("e3_p2", 10),rep("e3_p3", 10),rep("e3_p4", 10),
rep("e3_p5", 10),rep("e3_p6", 10),rep("e3_p7", 10),rep("e3_p8", 10),
rep("e3_p9", 10),rep("e3_p10", 10))
vec_e1_data_x <- c(e1_means_x); vec_e1_data_y <- c(e1_means_y); vec_e1_data_z <- c(e1_means_z)
vec_e2_data_x <- c(e2_means_x); vec_e2_data_y <- c(e2_means_y); vec_e2_data_z <- c(e2_means_z)
vec_e3_data_x <- c(e3_means_x); vec_e3_data_y <- c(e3_means_y); vec_e3_data_z <- c(e3_means_z)
df_e1_mean_x <- data.frame(vec_e1_data_x, vec_e1_grps); df_e1_mean_y <- data.frame(vec_e1_data_y, vec_e1_grps); df_e1_mean_z <- data.frame(vec_e1_data_z, vec_e1_grps)
df_e2_mean_x <- data.frame(vec_e2_data_x, vec_e2_grps); df_e2_mean_y <- data.frame(vec_e2_data_y, vec_e2_grps); df_e2_mean_z <- data.frame(vec_e2_data_z, vec_e2_grps)
df_e3_mean_x <- data.frame(vec_e3_data_x, vec_e3_grps); df_e3_mean_y <- data.frame(vec_e3_data_y, vec_e3_grps); df_e3_mean_z <- data.frame(vec_e3_data_z, vec_e3_grps)
LM_e1_mean_x <- lm(vec_e1_data_x ~ vec_e1_grps, data = df_e1_mean_x)
LM_e1_mean_y <- lm(vec_e1_data_y ~ vec_e1_grps, data = df_e1_mean_y)
LM_e1_mean_z <- lm(vec_e1_data_z ~ vec_e1_grps, data = df_e1_mean_z)
LM_e2_mean_x <- lm(vec_e2_data_x ~ vec_e2_grps, data = df_e2_mean_x)
LM_e2_mean_y <- lm(vec_e2_data_y ~ vec_e2_grps, data = df_e2_mean_y)
LM_e2_mean_z <- lm(vec_e2_data_z ~ vec_e2_grps, data = df_e2_mean_z)
LM_e3_mean_x <- lm(vec_e3_data_x ~ vec_e3_grps, data = df_e3_mean_x)
LM_e3_mean_y <- lm(vec_e3_data_y ~ vec_e3_grps, data = df_e3_mean_y)
LM_e3_mean_z <- lm(vec_e3_data_z ~ vec_e3_grps, data = df_e3_mean_z)
anova(LM_e1_mean_x)$Pr[1]; anova(LM_e1_mean_y)$Pr[1]; anova(LM_e1_mean_z)$Pr[1]
anova(LM_e2_mean_x)$Pr[1]; anova(LM_e2_mean_y)$Pr[1]; anova(LM_e2_mean_z)$Pr[1]
anova(LM_e3_mean_x)$Pr[1]; anova(LM_e3_mean_y)$Pr[1]; anova(LM_e3_mean_z)$Pr[1]
7*300
load("armdata.RData")
# e experiments: 1:16
# p people: 1:10
# r repetitions: 1:10
# i measurements: 1:300
data_all_exps <- c(NA, 16*10*10*300)
count = 1
for (e in 1:16){
for (p in 1:10){
for (r in 1:10){
for (i in 1:300){
data_all_exps[count] <- armdata[[e]][[p]][[r]][[i]]
count = count+1
}
}
}
}
vec_experiments <- c(rep("e1", 30000), rep("e2", 30000),rep("e3", 30000),rep("e4", 30000),rep("e5", 30000),rep("e6", 30000),
rep("e7", 30000),rep("e8", 30000),rep("e9", 30000),rep("e10", 30000),rep("e11", 30000),rep("e12", 30000),
rep("e13", 30000),rep("e14", 30000),rep("e15", 30000),rep("e16", 30000))
people <- c(rep("p1", 3000), rep("p2", 3000),rep("p3", 3000),rep("p4", 3000),rep("p5", 3000),rep("p6", 3000),
rep("p7", 3000),rep("p8", 3000),rep("p9", 3000),rep("p10", 3000))
vec_people <- c(rep(people, 16))
x_coords <- c(rep("x",100))
y_coords <- c(rep("y",100))
z_coords <- c(rep("z",100))
vec_coords <- c(rep(c(x_coords,y_coords,z_coords),1600))
df_all <- data.frame(data_all_exps, vec_experiments, vec_coords, vec_people)
um_nans <- length(is.na(df_all$data_all_exps)[is.na(df_all$data_all_exps) == T])
nan_indexes <- which(is.na(df_all$data_all_exps), arr.ind = T, useNames=F)
nan_indexes
View(armdata)
View(df_all)
6*300
coord_count = 1
data_all_means <- c(NA, 480000/100)
for (i in 1:length(data_all_exps)){
data_all_means[i] <- data_all_exps[coord_count: coord_count+100]
coord_count = coord_count + 100
}
coord_count = 1
coord_count = 1
data_all_means <- c(NA, (480000/100))
for (i in 1:length(data_all_exps)){
data_all_means[i] <- mean(data_all_exps[coord_count: coord_count+100])
coord_count = coord_count + 100
}
vec_mean_people <- c("p1", "p2", "p3", "p4","p5", "p6", "p7", "p8","p9", "p10")
mean_people <- c(rep(vec_mean_people, 16))
View(df_all)
coord_count = 1
data_all_means <- c(NA, (480000/100))
for (i in 1:length(data_all_exps)/100){
data_all_means[i] <- mean(data_all_exps[coord_count: coord_count+100])
coord_count = coord_count + 100
}
vec_mean_people <- c("p1", "p2", "p3", "p4","p5", "p6", "p7", "p8","p9", "p10")
mean_people <- c(rep(vec_mean_people, 16))
vec_mean_experiments <- c(rep("e1",10),rep("e2",10), rep("e3",10),rep("e4",10),rep("e5",10), rep("e6",10),
rep("e7",10),rep("e8",10), rep("e9",10), rep("e10",10),rep("e11",10), rep("e12",10),
rep("e13",10),rep("e14",10), rep("e15",10), rep("e16", 10))
vec_mean_coords <- c("x", "y", "z")
mean_coords <- rep(vec_mean_coords, 16)
mean_experiments <- c(rep("e1",10),rep("e2",10), rep("e3",10),rep("e4",10),rep("e5",10), rep("e6",10),
rep("e7",10),rep("e8",10), rep("e9",10), rep("e10",10),rep("e11",10), rep("e12",10),
rep("e13",10),rep("e14",10), rep("e15",10), rep("e16", 10))
df_all_means <- data.frame(data_all_means, mean_people, mean_experiments, mean_coords)
View(df_all_means)
mean(data_all_exps[1:101])
coord_count = 1
data_all_means <- c(NA, (480000/100))
for (i in 1:length(data_all_exps)/100){
data_all_means[i] <- mean(data_all_exps[coord_count:coord_count+100])
coord_count = coord_count + 100
coord_count = 1
data_all_means <- c(NA, (480000/100))
for (i in 1:length(data_all_exps)/100){
data_all_means[i] <- mean(data_all_exps[coord_count:coord_count+100])
coord_count = coord_count + 100
}
data_all_means[1]
1+1
