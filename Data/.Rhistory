vec <- c(2,1,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2)
median((vec-mean(vec))/sd(vec))
vec <- c(2,1,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,2,2,2,1,1,2,2,2,2,2,2,2,2,2)
median((vec-mean(vec))/sd(vec))
vec <- c(2,1,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,2,2,2,1,1,2,2,2,2,2,2,2,2)
median((vec-mean(vec))/sd(vec))
vec <- c(2,1,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1)
median((vec-mean(vec))/sd(vec))
vec <- c(2,1,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
median((vec-mean(vec))/sd(vec))
vec <- c(2,1,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
median((vec-mean(vec))/sd(vec))
mu1 <- 3.177
sd1 <- 0.0062
mu2 <- 3.181
sd2 = 0.0076
mu3 <- 3.184
sd3 <- 0.0075
p1 <- dnorm(3.19,mu1,sd1)*0.19
p2 <- dnorm(3.19,mu2,sd2)*0.34
p3 <- dnorm(3.19,mu3,sd3)*0.48
p2/(p1+p2+p3)
# Vi tager sigma = 2, da dette svarer til intercept.
x1 <- 3.918
xi <- mean(c(24.2,39.4))
lambda <- 20
xi <- mean(c(24.2,39.4))
1/2*dnorm(24.2, xi, lambda) + dnorm(24.2,xi,lambda)
1/2*(dnorm(24.2, xi, lambda) + dnorm(24.2,xi,lambda))
dnorm(32, mean(x1),sd(x1))*(2/11) + dnorm(14, mean(x2),sd(x2))*(2/11)
# When class == black
x1 <- c(38.0, 26.8)
x2 <- c(15.1,12.8)
dnorm(32, mean(x1),sd(x1))*(2/11) + dnorm(14, mean(x2),sd(x2))*(2/11)
(dnorm(32, mean(x1),sd(x1))* + dnorm(14, mean(x2),sd(x2)))*(2/11)
(dnorm(32, mean(x1),20)* + dnorm(14, mean(x2),20))*(2/11)
s <- sqrt(531)
µ <- 10
s <- sqrt(531)
k <- 10000
replicate(k, rnorm(10,µ,s))
sims <- replicate(k, rnorm(10,µ,s))
sims_sigma <-apply(sims, 2, sd)
quantile(sims_sigma, c(0.005,0.995))
µ <- 1
s <- sqrt(531)
k <- 10000
sims <- replicate(k, rnorm(10,µ,s))
sims_sigma <-apply(sims, 2, sd)
quantile(sims_sigma, c(0.005,0.995))
sims <- rnorm(10,µ,s)
sims_sigma <-apply(sims, 2, sd)
quantile(sims_sigma, c(0.005,0.995))
µ <- 1
s <- sqrt(531)
k <- 10000
sims <- rnorm(10,µ,s)
sims_sigma <-apply(sims, 2, sd)
quantile(sims_sigma, c(0.005,0.995))
sims <- rnorm(k,µ,s)
sims_sigma <-apply(sims, 2, sd)
quantile(sims_sigma, c(0.005,0.995))
µ <- 1
s <- sqrt(531)
k <- 10000
sims <- replicate(k,rnorm(k,µ,s))
µ <- 1
s <- sqrt(531)
k <- 10000
sims <- replicate(100,rnorm(k,µ,s))
sims_sigma <-apply(sims, 2, sd)
quantile(sims_sigma, c(0.005,0.995))
µ <- 1
s <- sqrt(531)
k <- 25000
sims <- replicate(100,rnorm(k,µ,s))
sims_sigma <-apply(sims, 2, sd)
quantile(sims_sigma, c(0.005,0.995))
?rchisq
µ <- 1
s <- sqrt(531)
k <- 25000
sims <- replicate(100,rnorm(k,µ,s))
sims_sigma <-apply(sims, 2, sd)
quantile(sims_sigma, c(0.005,0.995))
sims_chi <- replicate(k,rchisq(100, 29, s))
sims_sigma <-apply(sims, 2, sd)
quantile(sims_sigma, c(0.005,0.995))
sims <- replicate(100,rnorm(k,µ,s))
sims_sigma <-apply(sims, 2, sd)
quantile(sims_sigma, c(0.005,0.995))
sims_chi <- replicate(k,rchisq(100, 29, s))
sims_sigma <-apply(sims, 2, sd)
quantile(sims_sigma, c(0.005,0.995))
sims <- replicate(30,rnorm(k,µ,s))
sims_sigma <-apply(sims, 2, sd)
quantile(sims_sigma, c(0.005,0.995))
sims_chi <- replicate(k,rchisq(100, 29, s))
sims_sigma <-apply(sims, 2, sd)
quantile(sims_sigma, c(0.005,0.995))
µ <- 10
s <- sqrt(531)
k <- 25000
sims <- replicate(30,rnorm(k,µ,s))
sims_sigma <-apply(sims, 2, sd)
quantile(sims_sigma, c(0.005,0.995))
sims_chi <- replicate(k,rchisq(100, 29, s))
sims_sigm <-apply(sims, 2, sd)
quantile(sims_sigm, c(0.005,0.995))
µ <- 10
s <- sqrt(531)
k <- 25000
sims <- replicate(30,rnorm(k,µ,s))
sims_sigma <-apply(sims, 2, sd)
quantile(sims_sigma, c(0.005,0.995))
sims_chi <- replicate(k,rchisq(100, 29, s))
sims_sigm <-apply(sims, 2, sd)
quantile(sims_sigm, c(0.005,0.995))
µ <- 10
s <- 531
k <- 25000
sims <- replicate(30,rnorm(k,µ,s))
sims_sigma <-apply(sims, 2, sd)
quantile(sims_sigma, c(0.005,0.995))
sims_chi <- replicate(k,rchisq(100, 29, s))
sims_sigm <-apply(sims, 2, sd)
quantile(sims_sigm, c(0.005,0.995))
µ <- 10
s <- 531
k <- 25000
sims <- replicate(30,rnorm(k,µ,s))
sims_sigma <-apply(sims, 2, sd)
quantile(sims_sigma, c(0.005,0.995))
µ <- 10
s <- sqrt(531)
k <- 25000
µ <- 10
s <- sqrt(531)
k <- 25000
simSamples <- replicate(k, rnorm(30,µ,s))
?apply
3*s
2*s
simSamples <- replicate(k, rnorm(30,µ,s))
sim_sigmas <- apply(simSamples, 2, sigma)
µ <- 10
s <- sqrt(531)
k <- 25000
simSamples <- replicate(k, rnorm(30,µ,s))
sim_sigmas <- apply(simSamples, 2, sigma)
sim_sigmas <- apply(simSamples, 2, sd)
quantile(sim_sigmas, c(0.005, 0.995))
µ <- 10
s <- sqrt(531)
k <- 25000
simSamples <- replicate(k, rnorm(30,µ,s))
sim_sigmas <- apply(simSamples, 2, sd)
quantile(sim_sigmas, c(0.005, 0.995))
k <- 35000
simSamples <- replicate(k, rnorm(30,µ,s))
sim_sigmas <- apply(simSamples, 2, sd)
quantile(sim_sigmas, c(0.005, 0.995))
k <- 50000
simSamples <- replicate(k, rnorm(30,µ,s))
sim_sigmas <- apply(simSamples, 2, sd)
quantile(sim_sigmas, c(0.005, 0.995))
µ <- 100
s <- sqrt(531)
k <- 50000
simSamples <- replicate(k, rnorm(30,µ,s))
sim_sigmas <- apply(simSamples, 2, sd)
quantile(sim_sigmas, c(0.005, 0.995))
µ <- 500
s <- sqrt(531)
k <- 50000
simSamples <- replicate(k, rnorm(30,µ,s))
sim_sigmas <- apply(simSamples, 2, sd)
quantile(sim_sigmas, c(0.005, 0.995))
µ <- 500
s <- sqrt(531)
k <- 50000
simSamples <- replicate(k, rnorm(30,µ,s))
alpha <- 0.005
sim_sigmas <- apply(simSamples, 2, sd)
quantile(sim_sigmas, c(alpha/2, 1-(alpha/2)))
µ <- 500
k <- 50000
s <- sqrt(531)
alpha <- 0.0005
sim_sigmas <- apply(simSamples, 2, sd)
quantile(sim_sigmas, c(alpha/2, 1-(alpha/2)))
simSamples <- replicate(k, rnorm(30,µ,s))
alpha <- 0.005
simSamples <- replicate(k, rnorm(30,µ,s))
sim_sigmas <- apply(simSamples, 2, sd)
quantile(sim_sigmas, c(alpha/2, 1-(alpha/2)))
alpha <- 0.001
simSamples <- replicate(k, rnorm(30,µ,s))
sim_sigmas <- apply(simSamples, 2, sd)
quantile(sim_sigmas, c(alpha/2, 1-(alpha/2)))
alpha <- 0.01
simSamples <- replicate(k, rnorm(30,µ,s))
sim_sigmas <- apply(simSamples, 2, sd)
quantile(sim_sigmas, c(alpha/2, 1-(alpha/2)))
µ <- 500
k <- 50000
s <- sqrt(531)
alpha <- 0.01
sim_sigmas <- apply(simSamples, 2, sd)
quantile(sim_sigmas, c(alpha/2, 1-(alpha/2)))
simSamples <- replicate(k, rnorm(30,µ,s))
µ <- 500
s <- sqrt(531)
k <- 50000
alpha <- 0.001
simSamples <- replicate(k, rnorm(30,µ,s))
sim_sigmas <- apply(simSamples, 2, sd)
quantile(sim_sigmas, c(alpha/2, 1-(alpha/2)))
?rhyper
# 52 kort, 4 esser, 13 spar
# for at trække et s
rhyper(52,4,52-4,4)
# 52 kort, 4 esser, 13 spar
# for at trække et s
rhyper(52,4,52-4,4)
load("armdata.RData")
# e experiments: 1:16
# p people: 1:10
# r repetitions: 1:10
# i measurements: 1:300
data_all_exps <- c(NA, 16*10*10*300)
count = 1
for (e in 1:16){
for (p in 1:10){
for (r in 1:10){
for (i in 1:300){
data_all_exps[count] <- armdata[[e]][[p]][[r]][[i]]
count = count+1
}
}
}
}
vec_experiments <- c(rep("e1", 30000), rep("e2", 30000),rep("e3", 30000),rep("e4", 30000),rep("e5", 30000),rep("e6", 30000),
rep("e7", 30000),rep("e8", 30000),rep("e9", 30000),rep("e10", 30000),rep("e11", 30000),rep("e12", 30000),
rep("e13", 30000),rep("e14", 30000),rep("e15", 30000),rep("e16", 30000))
people <- c(rep("p1", 3000), rep("p2", 3000),rep("p3", 3000),rep("p4", 3000),rep("p5", 3000),rep("p6", 3000),
rep("p7", 3000),rep("p8", 3000),rep("p9", 3000),rep("p10", 3000))
vec_people <- c(rep(people, 16))
x_coords <- c(rep("x",100))
y_coords <- c(rep("y",100))
z_coords <- c(rep("z",100))
vec_coords <- c(rep(c(x_coords,y_coords,z_coords),1600))
df_all <- data.frame(data_all_exps, vec_experiments, vec_coords, vec_people)
# Remove NaN's
num_nans <- length(is.na(df_all$data_all_exps)[is.na(df_all$data_all_exps) == T])
nan_indexes <- which(is.na(df_all$data_all_exps), arr.ind = T, useNames=F)
is.na(df_all$data_all_exps[1])
is.na(df_all$data_all_exps[2])
is.na(df_all$data_all_exps[3])
is.na(df_all$data_all_exps[4])
is.na(df_all$data_all_exps[5])
is.na(df_all$data_all_exps[6])
is.na(df_all$data_all_exps[7])
is.na(df_all$data_all_exps[8])
is.na(df_all$data_all_exps[9])
is.na(df_all$data_all_exps[10])
df_all$data_all_exps[9]
View(df_all)
View(df_all)
load("armdata.RData")
load("armdata.RData")
setwd("C:/Users/micha/OneDrive/Skrivebord/02445-Project/Data")
load("armdata.RData")
data_all_exps <- c(NA, 16*10*10*300)
count = 1
for (e in 1:16){
for (p in 1:10){
for (r in 1:10){
for (i in 1:300){
data_all_exps[count] <- armdata[[e]][[p]][[r]][[i]]
count = count+1
}
}
}
}
vec_experiments <- c(rep("e1", 30000), rep("e2", 30000),rep("e3", 30000),rep("e4", 30000),rep("e5", 30000),rep("e6", 30000),
rep("e7", 30000),rep("e8", 30000),rep("e9", 30000),rep("e10", 30000),rep("e11", 30000),rep("e12", 30000),
rep("e13", 30000),rep("e14", 30000),rep("e15", 30000),rep("e16", 30000))
people <- c(rep("p1", 3000), rep("p2", 3000),rep("p3", 3000),rep("p4", 3000),rep("p5", 3000),rep("p6", 3000),
rep("p7", 3000),rep("p8", 3000),rep("p9", 3000),rep("p10", 3000))
vec_people <- c(rep(people, 16))
x_coords <- c(rep("x",100))
y_coords <- c(rep("y",100))
z_coords <- c(rep("z",100))
vec_coords <- c(rep(c(x_coords,y_coords,z_coords),1600))
df_all <- data.frame(data_all_exps, vec_experiments, vec_coords, vec_people)
is.na(df_all$data_all_exps[10])
is.na(df_all$data_all_exps[11])
nan_indexes[1]
nan_indexes[2]
) == T])
nan_indexes <- which(is.na(df_all$data_all_exps), arr.ind = T, useNames=F)
nan_indexes[1]
is.na(df_all$data_all_exps[144001])
is.na(df_all$data_all_exps[144002])
is.na(df_all$data_all_exps[14400])
for (i in 1:num_nans){
below = FALSE
above = FALSE
index = nan_indexes[i]
below_value = df_all$data_all_exps[index+1]
above_value = df_all$data_all_exps[index-1]
# Check if the below value of a NaN is also a NaN
if (df_all$vec_coords[nan_indexes[i]] == df_all$vec_coords[index+1]){
if (is.na(below_value) == FALSE){
below = TRUE
}}
# Check if the above value of a NaN is not a NaN
if (df_all$vec_coords[nan_indexes[i]] == df_all$vec_coords[index-1]){
if (is.na(above_value) == FALSE){
above = TRUE
}}
if (above == T && below ==T){
df_all$data_all_exps[index] = (below_value + above_value)/2
}
if (above == T){
df_all$data_all_exps[index] = above_value
}
if (below == T){
df_all$data_all_exps[index] = below_value
}
}
1+1
df_all$vec_coords[10]
if (df_all$vec_coords[10] == df_all$vec_coords[9]){
print("success")
}
for (i in 1:num_nans){
below = FALSE
above = FALSE
index = nan_indexes[i]
below_value = df_all$data_all_exps[index+1]
above_value = df_all$data_all_exps[index-1]
# Check if the below value of a NaN is also a NaN
if (df_all$vec_coords[index] == df_all$vec_coords[index+1]){
if (is.na(below_value) == FALSE){
below = TRUE
}}
# Check if the above value of a NaN is not a NaN
if (df_all$vec_coords[index] == df_all$vec_coords[index-1]){
if (is.na(above_value) == FALSE){
above = TRUE
}}
if (above == T && below ==T){
df_all$data_all_exps[index] = (below_value + above_value)/2
}
if (above == T){
df_all$data_all_exps[index] = above_value
}
if (below == T){
df_all$data_all_exps[index] = below_value
}
}
if (df_all$vec_coords[10] == df_all$vec_coords[9]){
if (test = T){
print("success")
}}
if (df_all$vec_coords[10] == df_all$vec_coords[9]){
if (test = T){
print("success")
}
}
if (df_all$vec_coords[10] == df_all$vec_coords[9])
if (test = T)
print("success")
if (df_all$vec_coords[10] == df_all$vec_coords[9])
if (test = T)
print("success")
if (df_all$vec_coords[10] == df_all$vec_coords[9])
if (test = T)
print("success")
print("success")}
if (test = T){
print("success")
}
if (df_all$vec_coords[10] == df_all$vec_coords[9]){
if (test = T){
print("success")
}
}
if (df_all$vec_coords[10] == df_all$vec_coords[9]){
if (test = T){
print("success")
}
test = T
if (df_all$vec_coords[10] == df_all$vec_coords[9]){
print("success")
if (test = T){
print("success")
}
print("success")
if (df_all$vec_coords[10] == df_all$vec_coords[9]){
print("success")
if (df_all$vec_coords[10] == df_all$vec_coords[9]){
if (test = T){
print("success")
}}
if (df_all$vec_coords[10] == df_all$vec_coords[9]){if (test = T){print("success")}}
if (df_all$vec_coords[10] == df_all$vec_coords[9]){if (test == T){print("success")}}
if (test == T){print("success")}}
for (i in 1:num_nans){
below = FALSE
above = FALSE
index = nan_indexes[i]
below_value = df_all$data_all_exps[index+1]
above_value = df_all$data_all_exps[index-1]
# Check if the below value of a NaN is also a NaN
if (df_all$vec_coords[index] == df_all$vec_coords[index+1]){
if (is.na(below_value) == FALSE){
below = TRUE
}}
# Check if the above value of a NaN is not a NaN
if (df_all$vec_coords[index] == df_all$vec_coords[index-1]){
if (is.na(above_value) == FALSE){
above = TRUE
}}
if (above == T && below ==T){
df_all$data_all_exps[index] = (below_value + above_value)/2
}
if (above == T){
df_all$data_all_exps[index] = above_value
}
if (below == T){
df_all$data_all_exps[index] = below_value
}
}
if (df_all$vec_coords[10] == df_all$vec_coords[9]){
if (test == T){print("success")}}
if (df_all$vec_coords[10] == df_all$vec_coords[9]){
if (test == T){print("success")}
}
if (test == T){print("success")}
if (test == T){print("success")
}
test = T
if (df_all$vec_coords[10] == df_all$vec_coords[9]){
if (test == T){print("success")
}
}
index = nan_indexes[i]
below_value = df_all$data_all_exps[index+1]
above_value = df_all$data_all_exps[index-1]
# Check if the below value of a NaN is also a NaN
if (df_all$vec_coords[index] == df_all$vec_coords[index+1]){
if (is.na(below_value) == FALSE){
below = TRUE
for (i in 1:num_nans){
below = FALSE
above = FALSE
index = nan_indexes[i]
below_value = df_all$data_all_exps[index+1]
above_value = df_all$data_all_exps[index-1]
# Check if the below value of a NaN is also a NaN
if (df_all$vec_coords[index] == df_all$vec_coords[index+1]){
if (is.na(below_value) == FALSE){
below = TRUE
}}
# Check if the above value of a NaN is not a NaN
if (df_all$vec_coords[index] == df_all$vec_coords[index-1]){
if (is.na(above_value) == FALSE){
above = TRUE
}}
if (above == T && below ==T){
df_all$data_all_exps[index] = (below_value + above_value)/2
}
if (above == T){
df_all$data_all_exps[index] = above_value
}
if (below == T){
df_all$data_all_exps[index] = below_value
}
}
for (i in 1:num_nans){
below = FALSE
above = FALSE
index = nan_indexes[i]
below_value = df_all$data_all_exps[index+1]
above_value = df_all$data_all_exps[index-1]
# Check if the below value of a NaN is also a NaN
if (df_all$vec_coords[index] == df_all$vec_coords[index+1]){
if (is.na(below_value) == FALSE){
below = TRUE
}}
# Check if the above value of a NaN is not a NaN
if (df_all$vec_coords[index] == df_all$vec_coords[index-1]){
if (is.na(above_value) == FALSE){
above = TRUE
}}
if (above == T && below ==T){
df_all$data_all_exps[index] = (below_value + above_value)/2
}
if (above == T){
df_all$data_all_exps[index] = above_value
}
if (below == T){
df_all$data_all_exps[index] = below_value
}
}
length(is.na(df_all$data_all_exps)[is.na(df_all$data_all_exps) == T])
1+1
1+1
1+1
